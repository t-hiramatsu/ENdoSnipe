################################################################################
# Javelin Configurations
################################################################################

#--------------------------------------------------
# 起動に関する設定
#--------------------------------------------------

# ConcurrentAccessMonitorやCollectionMonitor動作中にクラスロードが起ったときに、
# バイトコード変換を行うかどうかを設定するプロパティ。
javelin.skipClassOnProcessing=true


#--------------------------------------------------
# 動作解析用ログに関する設定
#--------------------------------------------------

# Javelinの動作状況を出力するシステムログの出力先ディレクトリ
javelin.system.log=../traces

# システムログのログレベル(FATAL、ERROR、WARN、INFO、DEBUG)
javelin.system.log.level=INFO

# システムログの最大ファイルサイズ(bytes)
javelin.system.log.size.max=1000000

# システムログの最大ファイル数
javelin.system.log.num.max=16

# Javelinのイベントレベル(ERROR、WARN、INFO)
javelin.event.level=WARN

# アラーム送信間隔の最小値
javelin.minimumAlarmInterval=0

# 同一のイベントを検出する間隔。前回のイベントからこの時間経過している場合のみ、イベントを検出する。
# NoTimeoutDetected、IntervalErrorが過剰に検出されることを防止する。
javelin.eventInterval=3600000


#--------------------------------------------------
# 通信に関する設定
#--------------------------------------------------

# BottleneckEyeとの通信に使用するポート番号
javelin.acceptPort=18000

# BottleNeckEyeとの通信に使用するポートを再取得する間隔
# 通信に使用するポートを起動時に取得できなかった場合、下記の間隔で再取得を行う(単位:ミリ秒)
javelin.bind.interval=5000

# BottleneckEye/DataCollectorとの通信に使用するポートを範囲指定するか
javelin.acceptPort.isRange=false

# BottleneckEye/DataCollectorとの通信に使用するポートを範囲指定する場合の最大値
javelin.acceptPort.rangeMax=18010

# Connection mode (client or server)
javelin.connection.mode=client

# BottleneckEye/DataCollectorとの通信に使用するホスト名 (javelin to BottleneckEye)
javelin.connectHost=localhost

# BottleneckEye/DataCollectorとの通信に使用するポート番号 (javelin to BottleneckEye)
javelin.connectPort=19000

# クラスタ名
javelin.clusterName=default

# Javelinのエージェント名。
javelin.agentName=agent


#--------------------------------------------------
# ファイルパスに関する設定(本ファイルからの相対パス指定可)
#--------------------------------------------------

# jvnファイルを出力するディレクトリへのパス
javelin.javelinFileDir=../logs

# ライセンスファイルへのパス
javelin.license.path=../license

# 閾値等の情報の永続化用ファイルへのパス
javelin.serializeFile=../data/serialize.dat

# 変換対象クラス指定ファイルへのパス
javelin.include=include_diag.conf

# 変換除外クラス指定ファイルへのパス
javelin.exclude=exclude_diag.conf


#--------------------------------------------------
# Javelinログ出力に関する設定
#--------------------------------------------------

# jvnログをサーバ側に保存するかどうか
javelin.log.enable=false

# jvnログの最大ファイル数
javelin.log.jvn.max=256

# jvnログファイルの圧縮閾値
# (出力ファイル数がこの数に達した時にログファイルをZIP圧縮します)
javelin.log.zip.max=256

# CallTreeNodeを使用するかどうか
javelin.call.tree.enable=true

# Javelinで保持するコールツリーの子の最大数。CallTreeに所属するCallTreeNodeの数がこの値より大きくなった場合に、
# 途中までのCallTreeNodeをjvnに出力し、Profilerビューで確認できる計測情報を保存する。
javelin.call.tree.max=5000

# CallTreeNodeが最大になった際にも全てをjvnログとして保存し、
# 計測するかどうか
javelin.call.tree.all=true

# 1クラスあたりで保持するメソッド呼び出し情報の最大数
javelin.record.invocation.num.max=1024

# Discardを実施するかどうか
javelin.discard=false


#--------------------------------------------------
# Javelinログ出力内容に関する設定
#--------------------------------------------------

# メソッド呼び出しの引数情報出力に関する設定
javelin.log.args=false
javelin.log.args.detail=false
javelin.log.args.detail.depth=1

# メソッド呼び出しの戻り値情報出力に関する設定
javelin.log.return=false
javelin.log.return.detail=false
javelin.log.return.detail.depth=1

# セッション情報を引数として出力するかどうか
javelin.log.http.session=true
javelin.log.http.session.detail=true
javelin.log.http.session.detail.depth=2

# 引数や戻り値情報の最大文字数
javelin.stringLimitLength=102400

# inheritanceで継承階層を調べる深さの最大値
javelin.inheritance.depth=5

# bytecodeの内容を元に計測対象から除外するかどうか。0:除外しない 1:除外する。
javelin.bytecode.exclude.policy=1

# Javelinの情報取得対象から除外する、最大bytecode長。bytecode長がこの値以下の場合のみ、除外判定を行う。
javelin.bytecode.exclude.length=32

#Javelinの情報取得対象から除外する、最大の制御命令数。制御命令の数がこの値以下の場合、除外する。
javelin.bytecode.exclude.controlCount=0

# メソッド呼び出しの時のスタックトレースを出力する
javelin.log.stacktrace=false

# ログに出力するスタックトレースの深さ
javelin.traceDepth=30

# VMのMBean情報を出力する
javelin.log.mbeaninfo=true
javelin.log.mbeaninfo.root=true

# メソッド名の最大文字数
javelin.invocation.name.limitLength=2048

# メソッド呼び出しのルートノードにつける名称
javelin.rootCallerName=root

# メソッド呼び出しのエンドノードが特定できない場合につける名称
javelin.endCalleeName=unknown

# スレッドの名称の決定方法
# 0:スレッド名@スレッドID(スレッドクラス名@オブジェクトID)
# 1:スレッドID
# 2:スレッド名
# 3:メソッド名（Servletフィルタ組み込み時にはサーブレットパスとなる）
javelin.threadModel=0

# CPU使用率の単位
javelin.cpu.unit=1


#--------------------------------------------------
# 閾値判定方式に関する設定
#--------------------------------------------------

# ターン・アラウンド・タイムを閾値超過の判定対象とする。
#javelin.recordStrategy=jp.co.acroquest.endosnipe.javelin.record.DefaultRecordStrategy

# ターン・アラウンド・タイムもしくはCPU時間を、
# 閾値超過の判定対象とする。
javelin.recordStrategy=jp.co.acroquest.endosnipe.javelin.record.CpuTimeRecordStrategy

# メソッドのターンアラウンドタイムが、
# これまでの最大値を更新した場合に、閾値超過とみなす。
#javelin.recordStrategy=jp.co.acroquest.endosnipe.javelin.record.MaxAccumulatedTimeUpdateRecordStrategy


#--------------------------------------------------
# 機能拡張用リスナの設定
#--------------------------------------------------

# アラームが発生した場合に追加処理を行うリスナ
javelin.alarmListeners=

# BottleneckEyeから電文を受信した際の処理を拡張するリスナ
javelin.telegramListeners=jp.co.acroquest.endosnipe.javelin.communicate.GetRequestTelegramListener,jp.co.acroquest.endosnipe.javelin.communicate.ResetRequestTelegramListener,jp.co.acroquest.endosnipe.javelin.communicate.telegram.JvnLogDownloadTelegramListener,jp.co.acroquest.endosnipe.javelin.communicate.telegram.JvnLogListTelegramListener,jp.co.acroquest.endosnipe.javelin.communicate.telegram.SystemResourceTelegramListener,jp.co.acroquest.endosnipe.javelin.communicate.telegram.UpdateRequestTelegramListener,jp.co.acroquest.endosnipe.javelin.communicate.telegram.GetPropertyRequestTelegramListener,jp.co.acroquest.endosnipe.javelin.communicate.TargetSetTelegramListener,jp.co.acroquest.endosnipe.javelin.communicate.telegram.RemoveClassTelegramListener,jp.co.acroquest.endosnipe.javelin.communicate.FunctionCallTelegramListener


#--------------------------------------------------
# 統計処理に関する設定
#--------------------------------------------------

# メモリ中に蓄積する(メソッド毎の)呼び出し情報の件数
javelin.intervalMax=0

# メモリ中に蓄積する(メソッド毎の)例外発生情報の件数
javelin.throwableMax=0

# クラス名の省略化を行う
# (Seasar2アプリケーションでは、クラス名が自動的に延長されるため、
#  本フラグをtrueに設定する事を推奨します)
javelin.className.simplify=false


#--------------------------------------------------
# メモリリーク検出に関する設定
#--------------------------------------------------

# Collectionのメモリリーク検出を行うかどうか
javelin.leak.collection.monitor=true

# メモリリークとして検出するCollection、Mapのサイズの閾値
javelin.leak.collectionSizeThreshold=10000

# メモリリークとしてCollection、Mapを検出した際、
# メモリリークを起こしたCollection、Mapのオブジェクトサイズを出力するかどうか
javelin.leak.collectionSizeOut=false

# このパラメータで指定したメモリリーク検出回数ごとに、スタックトレースを取得する
javelin.leak.interval=11

# メモリリーク検出時に、重複チェックを行うためのスタックトレースを保持する件数
javelin.leak.traceMax=20

# メモリリーク検出時に、判定に利用するスタックトレースを取得する深さ
javelin.leak.detect.traceDepth=5

# Java6以降でヒープヒストグラム解析を行うかどうか
javelin.leak.class.histo=true

# ヒープヒストグラム取得間隔(ms)
javelin.leak.class.histo.interval=3600000

# ヒープヒストグラム取得を行う際の最大件数
javelin.leak.class.histo.max=15

# ヒープヒストグラムを取得する際に、GCを行うかどうか
javelin.leak.class.histo.gc=true

# ファイナライズ待ちオブジェクト数を取得するかどうか
javelin.finalizationCount.monitor=true


#--------------------------------------------------
# スレッド監視に関する設定
#--------------------------------------------------

# スレッドコンテンション監視を行うかどうか
# (JRockit R26.0ではfalseにしてください)
javelin.thread.contention.monitor=true

# スレッド監視を行うかどうか
javelin.thread.monitor=true

# スレッド監視を行う周期(単位:ミリ秒)
javelin.thread.monitor.interval=1000

# スレッド監視の際に出力するスタックトレースの深さ
javelin.thread.monitor.depth=10

# ブロック継続イベントを出力する際のブロック継続時間の閾値。
# スレッド監視を行った際、閾値以上ならばイベント出力される。
javelin.thread.block.threshold=1000
javelin.thread.blocktime.threshold=2000

# フルスレッドダンプの出力を行うかどうか
# true の場合、以下の条件のいずれかを満たせばフルスレッドダンプを出力します。
# 1. スレッド数が javelin.thread.dump.threadnum 以上
# 2. CPU使用率が javelin.thread.dump.cpu 以上
javelin.thread.dump.monitor=false

# フルスレッドダンプ出力を判定する周期(単位:ミリ秒)
javelin.thread.dump.interval=15000

# フルスレッドダンプ出力を行うときの、スレッド数の閾値
javelin.thread.dump.threadnum=100

# フルスレッドダンプ出力を行うときの、CPU使用率の閾値
javelin.thread.dump.cpu=50

# フルGC検出を行うかどうか
javelin.fullgc.monitor=true

# フルGCを行うGarbageCollector名のリスト
javelin.fullgc.list=MarkSweepCompact,Garbage collection optimized for throughput Old Collector

# フルGC検出のGC実行時間の閾値
javelin.fullgc.threshold=5000

# Java6以降でデッドロック監視を行うかどうか
javelin.thread.deadlock.monitor=true


#--------------------------------------------------
# ネットワーク入出力監視に関する設定
#--------------------------------------------------

# ネットワーク入力量を監視するかどうか
javelin.net.input.monitor=true

# ネットワーク出力量を監視するかどうか
javelin.net.output.monitor=true


#--------------------------------------------------
# ファイル入出力監視に関する設定
#--------------------------------------------------

# ファイル入力量を監視するかどうか
javelin.file.input.monitor=true

# ファイル出力量を監視するかどうか
javelin.file.output.monitor=true


#--------------------------------------------------
# Turn Around Time 監視に関する設定
#--------------------------------------------------

# Turn Around Timeを監視するかどうか
javelin.tat.monitor=true

# Turn Around Timeの保持期間(単位:ミリ秒)
javelin.tat.keepTime=15000

# Turn Around Timeの値が0の場合に、0の出力を継続する時間(単位:ミリ秒)
javelin.tat.zeroKeepTime=10000


#--------------------------------------------------
# HTTP セッション監視に関する設定
#--------------------------------------------------

# HttpSessionのインスタンス数を監視するかどうか
javelin.httpSessionCount.monitor=true

# HttpSessionへの登録オブジェクト総サイズを監視するかどうか
javelin.httpSessionSize.monitor=false


#--------------------------------------------------
# 複数スレッドからの非同期アクセス監視に関する設定
#--------------------------------------------------

# 複数スレッドからの非同期アクセスを監視するかどうか
javelin.concurrent.monitor=true


#--------------------------------------------------
# タイムアウト値の検出に関する設定
#--------------------------------------------------

# タイムアウト値設定の監視を行うかどうか
javelin.timeout.monitor=true


#--------------------------------------------------
# Log4jエラーログ出力監視に関する設定
#--------------------------------------------------

# エラーログ出力時のスタックトレースを出力するログレベルの閾値
# Log4jにて、閾値以上のレベルでログ出力された場合、スタックトレースを出力する
javelin.log4j.printstack.level=ERROR


#--------------------------------------------------
# 線形検索監視に関する設定
#--------------------------------------------------

# 線形検索の検出を行うかどうか
javelin.linearsearch.monitor=true

# 線形検索検出を行うリストサイズの閾値
javelin.linearsearch.size=1000

# 線形検索対象となる、リストに対する検索した要素数の割合
javelin.linearsearch.ratio=10


#--------------------------------------------------
# EJBのセッション監視に関する設定
#--------------------------------------------------

# EJBのセッション監視を行うかどうか
javelin.ejb.session.monitor=false


#--------------------------------------------------
# 各種閾値に関する設定
#--------------------------------------------------

# 呼び出し情報の蓄積を行うターン・アラウンド・タイムの閾値(単位:ミリ秒)
javelin.statisticsThreshold=0

# BottleneckEyeへの通知を行うCPUタイムの閾値(単位:ミリ秒)
javelin.alarmCpuThreshold=3000

# BottleneckEyeへの通知を行うターン・アラウンド・タイムの閾値(単位:ミリ秒)
javelin.alarmThreshold=5000

# 例外情報をBottleneckEyeへ通知する
javelin.alarmException=true


#--------------------------------------------------
# メソッド呼び出し間隔に関する設定
#--------------------------------------------------

# メソッドを指定された間隔(ミリ秒)未満の時間内に
# 再度呼び出した場合に、アラームを出力するかどうか
javelin.interval.monitor=true

# フレームワークの初期化メソッド等、頻繁に呼び出す必要の無いものの
# 呼び出しをチェックします
# javelin.interval.monitor=true のときに有効
javelin.interval.threshold=org.apache.velocity.app.Velocity#init=10000,org.springframework.context.support.GenericApplicationContext#GenericApplicationContext=10000,org.seasar.framework.container.factory.SingletonS2ContainerFactory#init=10000,org.seasar.framework.container.factory.S2ContainerFactory#create=10000,javax.xml.bind.JAXBContext#newInstance=30000,org.apache.commons.httpclient.SimpleHttpConnectionManager#SimpleHttpConnectionManager=10000,org.apache.log4j.PropertyConfigurator#doConfigure=10000,org.apache.log4j.xml.DOMConfigurator#doConfigure=10000,org.apache.log4j.Category#debug=10000

# 時間のかかる検索等、頻繁に呼び出す必要の無いものの
# 呼び出しをチェックします
# javelin.interval.monitor=true のときに有効
javelin.interval.perargs.threshold=javax.naming.InitialContext#lookup=10000,java.rmi.Naming#lookup=10000


#--------------------------------------------------
# 計測対象自動絞り込み機能に関する設定
#--------------------------------------------------

# 計測対象から自動除外する呼び出し回数の閾値
javelin.autoExcludeThreshold.count=0

# 計測対象から自動除外する実行時間の閾値(単位:ミリ秒)
javelin.autoExcludeThreshold.time=0


#--------------------------------------------------
# 計測データの取得に関する設定
#--------------------------------------------------

# システムのリソースデータを取得するかどうか
javelin.resource.collectSystemResources=true

# 計測項目名(ID)の接頭辞にする文字列
javelin.resource.itemName.prefix=

# 計測項目名(ID)に接頭辞を付与しない項目の前方一致パターンリスト
#javelin.resource.itemName.noPrefixList=/hdfs,/mapreduce


#--------------------------------------------------
# イベント送信に関する設定
#--------------------------------------------------

# InvocationFullEventを送信するかどうか
javelin.record.invocation.sendFullEvent=true


#--------------------------------------------------
# ストールメソッド監視に関する設定
#--------------------------------------------------
# ストールメソッドを監視するかどうか
javelin.method.stall.monitor=false

# ストールメソッドを監視する周期 (単位:ミリ秒)
javelin.method.stall.interval=10000

# ストールメソッドと判断する閾値 (単位:ミリ秒)
javelin.method.stall.threshold=60000

# ストールメソッド検出時に出力するスタックトレースの深さ
javelin.method.stall.traceDepth=30


#--------------------------------------------------
# Hadoopに関する設定
#--------------------------------------------------
# HadoopAgentのリソースデータを取得するかどうか
javelin.resource.collectHadoopAgentResources=false

# HBaseAgentのリソースデータを取得するかどうか
javelin.resource.collectHBaseAgentResources=false


################################################################################
# JDBC Javelin Configurations
################################################################################

#--------------------------------------------------
# JDBCJavelinに関する共通設定
#--------------------------------------------------

# JDBCの監視を行うかどうか
javelin.jdbc.enable=true

# バインド変数の値を記録する。
javelin.jdbc.recordBindVal=false

# ネストしたJDBCドライバクラスの呼び出しを、全てログ出力する。
javelin.jdbc.recordDuplJdbcCall=false

# 記録するSQLの文字列長さの上限。
javelin.jdbc.stringLimitLength=102400

# 同一トランザクション内の同一SQL呼び出し回数超過を監視するかどうか
javelin.jdbc.sqlcount.monitor=true

# 同一トランザクション内の同一SQL呼び出し回数超過の閾値
# javelin.jdbc.sqlcount.monitor=true のときに有効
javelin.jdbc.sqlcount=20

# JDBCJavelinでスタックトレースを出力するかどうか。
javelin.jdbc.record.stackTrace=true

# JDBCJavelinでスタックトレースを出力するための閾値
javelin.jdbc.record.stacktraceThreashold=0


#--------------------------------------------------
# 実行計画取得に関する設定
#--------------------------------------------------

# 実行計画を取得するかどうか。
javelin.jdbc.recordExecPlan=true

# SQLの実行時間が以下の時間を超過した場合に、実行計画を取得する。(単位:ミリ秒)
javelin.jdbc.execPlanThreshold=0

# 実行計画取得の間隔(ms)。
javelin.jdbc.planInterval=86400000


#--------------------------------------------------
# 各種DBMS固有の設定
#--------------------------------------------------

# セッション単位にOracle SQLトレースを出力させる。
javelin.jdbc.oracle.allowSqlTrace=false

# PostgreSQLに詳細な実行計画を出力させる。
javelin.jdbc.postgres.verbosePlan=false


# End of javelin.properties ####################################################
