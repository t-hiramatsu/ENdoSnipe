/**
 * ENdoSnipe Commutator
 * ModPythonからEndoSnipeのDataCollectorに送る情報を収集する。
 *
 * Copyright (C) Acroquest Technology, Co.LTD
 */

%{
#include <linux/sched.h>
#include <string.h>
%}

function local_clock:long()
%{
    THIS->__retvalue = local_clock();
%}

global utime, stime
global function_entry
global function_start_time
global function_times

probe _ens.sched_switch = kernel.trace("sched_switch")
{
    utime[tid()] = task_utime()
    stime[tid()] = task_stime()
}

function print_period()
{
    printf("/common/fundamental/time/current,%ld\n",gettimeofday_ms())

    foreach ([tid] in utime) {
        utimemerged += utime[tid]
    }
    foreach ([tid] in stime) {
        stimemerged += stime[tid]
    }
    delete utime
    delete stime
    printf("/process/cpu/time/total,%ld\n", utimemerged + stimemerged)
    printf("/system/cpu/time/user,%ld\n", utimemerged)
}

// 1
probe process("/usr/local/apache-2.4.6/bin/httpd").library("/usr/lib64/libpython2.6.so.1.0").mark("function__entry")
{
    // printf("Function entry: File %s, Function name %s\n", user_string($arg1), user_string($arg2));
    idstr = sprintf("%s-%d", user_string($arg1), tid())
    function_entry[user_string($arg1)]++
    function_start_time[idstr] = local_clock()
}

// 2
probe process("/usr/local/apache-2.4.6/bin/httpd").library("/usr/lib64/libpython2.6.so.1.0").mark("function__return")
{
    // printf("Function return: File %s, Function name %s\n", user_string($arg1), user_string($arg2));
    idstr = sprintf("%s-%d", user_string($arg1), tid())
    start_clock = function_start_time[idstr]; delete function_start_time[idstr]
    if(start_clock){
        function_time = local_clock() - start_clock
        function_times[user_string($arg1)] += function_time
    }
}

function print_function_entry()
{
    foreach([funcname] in function_times)
    {
        if("/" == substr(funcname, 0, 1)){
            printf("/wsgi%s/function_entry,%d\n", funcname, function_entry[funcname]);
            printf("/wsgi%s/function_time,%d\n", funcname, function_times[funcname]);
        } else {
            printf("/wsgi/%s/function_entry,%d\n", funcname, function_entry[funcname]);
            printf("/wsgi/%s/function_time,%d\n", funcname, function_times[funcname]);
        }
    }
    delete function_entry
    delete function_times
}

probe _ens.sched_switch{}

probe timer.ms(15000)
{
    print_period()
    print_function_entry()
    printf(".\n")
}


//probe end
//{
//}

