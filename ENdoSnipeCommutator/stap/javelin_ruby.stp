/**
 * ENdoSnipe Commutator
 * rubyからEndoSnipeのDataCollectorに送る情報を収集する。
 *
 * Copyright (C) Acroquest Technology, Co.LTD
 */

%{
#include <linux/sched.h>
#include <string.h>
%}

function local_clock:long()
%{
    THIS->__retvalue = local_clock();
%}

global utime, stime
global array_create
global cmethod_entry, cmethod_start_time, cmethod_times
global find_require_entry, find_require_start_time, find_require_times
global gc_mark_begin, gc_mark_start_time, gc_mark_times
global gc_sweep_begin, gc_sweep_start_time, gc_sweep_times
global hash_create
global load_entry, load_start_time, load_times
global method_entry, method_start_time, method_times
global object_create
global parse_begin, parse_start_time, parse_times
global raise
global require_entry, require_start_time, require_times
global string_create

probe begin
{
    init_counter()
}

// 1
probe process("/usr/local/ruby-2.0.0-p247/bin/ruby").mark("array__create")
{
    array_create++
}

// 2
probe process("/usr/local/ruby-2.0.0-p247/bin/ruby").mark("cmethod__entry")
{
    cmethod_entry++
    cmethod_start_time[tid()] = local_clock()
}

// 3
probe process("/usr/local/ruby-2.0.0-p247/bin/ruby").mark("cmethod__return")
{
    start_clock = cmethod_start_time[tid()]; delete cmethod_start_time[tid()]
    if(start_clock){
        cmethod_time = local_clock() - start_clock
        cmethod_times += cmethod_time
    }
}

// 4
probe process("/usr/local/ruby-2.0.0-p247/bin/ruby").mark("find__require__entry")
{
    find_require_entry++
    find_require_start_time[tid()] = local_clock()
}

// 5
probe process("/usr/local/ruby-2.0.0-p247/bin/ruby").mark("find__require__return")
{
    start_clock = find_require_start_time[tid()]; delete find_require_start_time[tid()]
    if(start_clock){
        find_require_time = local_clock() - start_clock
        find_require_times += find_require_time
    }
}

// 6
probe process("/usr/local/ruby-2.0.0-p247/bin/ruby").mark("gc__mark__begin")
{
    gc_mark_begin++
    gc_mark_start_time[tid()] = local_clock()
}

// 7
probe process("/usr/local/ruby-2.0.0-p247/bin/ruby").mark("gc__mark__end")
{
    start_clock = gc_mark_start_time[tid()]; delete gc_mark_start_time[tid()]
    if(start_clock){
        gc_mark_time = local_clock() - start_clock
        gc_mark_times += gc_mark_time
    }
}

// 8
probe process("/usr/local/ruby-2.0.0-p247/bin/ruby").mark("gc__sweep__begin")
{
    gc_sweep_begin++
    gc_sweep_start_time[tid()] = local_clock()
}

// 9
probe process("/usr/local/ruby-2.0.0-p247/bin/ruby").mark("gc__sweep__end")
{
    start_clock = gc_sweep_start_time[tid()]; delete gc_sweep_start_time[tid()]
    if(start_clock){
        gc_sweep_time = local_clock() - start_clock
        gc_sweep_times += gc_sweep_time
    }
}

// 10
probe process("/usr/local/ruby-2.0.0-p247/bin/ruby").mark("hash__create")
{
    hash_create++
}

// 11
probe process("/usr/local/ruby-2.0.0-p247/bin/ruby").mark("load__entry")
{
    load_entry++
    load_start_time[tid()] = local_clock()
}

// 12
probe process("/usr/local/ruby-2.0.0-p247/bin/ruby").mark("load__return")
{
    start_clock = load_start_time[tid()]; delete load_start_time[tid()]
    if(start_clock){
        load_time = local_clock() - start_clock
        load_times += load_time
    }
}

// 13
probe process("/usr/local/ruby-2.0.0-p247/bin/ruby").mark("method__entry")
{
//    printf("Method entry: File %s, Class %s, Method name %s\n", user_string($arg3), user_string($arg1), user_string($arg2));
    idstr = sprintf("%s.%s-%d",user_string($arg1),user_string($arg2),tid())
    classAndMethod = sprintf("%s.%s",user_string($arg1),user_string($arg2))
    method_entry[classAndMethod]++
    method_start_time[idstr] = local_clock()
}

// 14
probe process("/usr/local/ruby-2.0.0-p247/bin/ruby").mark("method__return")
{
//    printf("Method return: File %s, Class %s, Method name %s\n", user_string($arg3), user_string($arg1), user_string($arg2));
    idstr = sprintf("%s.%s-%d",user_string($arg1),user_string($arg2),tid())
    classAndMethod = sprintf("%s.%s",user_string($arg1),user_string($arg2))
    start_clock = method_start_time[idstr]; delete method_start_time[idstr]
    if(start_clock){
        method_time = local_clock() - start_clock
        method_times[classAndMethod] += method_time
    }
}

// 15
probe process("/usr/local/ruby-2.0.0-p247/bin/ruby").mark("object__create")
{
    object_create++
}

// 16
probe process("/usr/local/ruby-2.0.0-p247/bin/ruby").mark("parse__begin")
{
    parse_begin++
    parse_start_time[tid()] = local_clock()
}

// 17
probe process("/usr/local/ruby-2.0.0-p247/bin/ruby").mark("parse__end")
{
    start_clock = parse_start_time[tid()]; delete parse_start_time[tid()]
    if(start_clock){
        parse_time = local_clock() - start_clock
        parse_times += parse_time
    }
}

// 18
probe process("/usr/local/ruby-2.0.0-p247/bin/ruby").mark("raise")
{
    raise++
}

// 19
probe process("/usr/local/ruby-2.0.0-p247/bin/ruby").mark("require__entry")
{
    require_entry++
    require_start_time[tid()] = local_clock()
}

// 20
probe process("/usr/local/ruby-2.0.0-p247/bin/ruby").mark("require__return")
{
    start_clock = require_start_time[tid()]; delete require_start_time[tid()]
    if(start_clock){
        require_time = local_clock() - start_clock
        require_times += require_time
    }
}

// 21
probe process("/usr/local/ruby-2.0.0-p247/bin/ruby").mark("string__create")
{
    string_create++
}

probe _ens.sched_switch = kernel.trace("sched_switch")
{
    utime[tid()] = task_utime()
    stime[tid()] = task_stime()
}

function print_period()
{
    printf("/common/fundamental/time/current,%ld\n",gettimeofday_ms())

    foreach ([tid] in utime) {
        utimemerged += utime[tid]
    }
    foreach ([tid] in stime) {
        stimemerged += stime[tid]
    }
    delete utime
    delete stime
    printf("/process/cpu/time/total,%ld\n", utimemerged + stimemerged)
    printf("/system/cpu/time/user,%ld\n", utimemerged)
}

function print_method_entry()
{
    foreach([classAndMethod] in method_entry)
    {
        printf("/ruby/method_entry/%s,%d\n", classAndMethod, method_entry[classAndMethod]);
        printf("/ruby/method_time/%s,%d\n", classAndMethod, method_times[classAndMethod]);
    }
    delete method_entry
    delete method_times
}

function print_counter()
{
    printf("/ruby/count/array_create,%d\n", array_create)
    printf("/ruby/count/cmethod_entry,%d\n", cmethod_entry)
    printf("/ruby/count/find_require_entry,%d\n", find_require_entry)
    printf("/ruby/count/gc_mark_begin,%d\n", gc_mark_begin)
    printf("/ruby/count/gc_sweep_begin,%d\n", gc_sweep_begin)
    printf("/ruby/count/hash_create,%d\n", hash_create)
    printf("/ruby/count/load_entry,%d\n", load_entry)
    printf("/ruby/count/object_create,%d\n", object_create)
    printf("/ruby/count/parse_begin,%d\n", parse_begin)
    printf("/ruby/count/raise,%d\n", raise)
    printf("/ruby/count/require_entry,%d\n", require_entry)
    printf("/ruby/count/string_create,%d\n", string_create)
}

function print_times()
{
    printf("/ruby/time/cmethod,%d\n", cmethod_times)
    printf("/ruby/time/find_require,%d\n", find_require_times)
    printf("/ruby/time/gc_mark,%d\n", gc_mark_times)
    printf("/ruby/time/gc_sweep,%d\n", gc_sweep_times)
    printf("/ruby/time/load,%d\n", load_times)
    printf("/ruby/time/parse,%d\n", parse_times)
    printf("/ruby/time/require,%d\n", require_times)
}

function init_counter()
{
    array_create = 0
    cmethod_entry = 0
    cmethod_times = 0
    find_require_entry = 0
    find_require_times = 0
    gc_mark_begin = 0
    gc_mark_times = 0
    gc_sweep_begin = 0
    gc_sweep_times = 0
    hash_create = 0
    load_entry = 0
    load_times = 0
    object_create = 0
    parse_begin = 0
    parse_times = 0
    raise = 0
    require_entry = 0
    require_times = 0
    string_create = 0
}

probe _ens.sched_switch{}

probe timer.ms(15000)
{
    print_period()
    print_counter()
    print_times()
    print_method_entry()
    printf(".\n")
    init_counter()
}

//probe end
//{
//}
