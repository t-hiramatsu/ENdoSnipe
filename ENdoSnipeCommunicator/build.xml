<?xml version="1.0" encoding="UTF-8" ?>
<project name="ENdoSnipeCommunicator" default="pluginDist" basedir=".">
    <import file="../ENdoSnipe/build_common.xml" />

    <!-- このビルド用のグローバルプロパティを設定する -->
    <property name="distname" value="endosnipe-communicator" />
    <property name="pluginname" value="jp.co.acroquest.endosnipe.communicator" />

    <property name="src" location="src/main/java" />
    <property name="src.test" location="src/test/java" />
    <property name="resources" location="src/main/resources" />
    <property name="resources.test" location="src/test/resources" />
    <property name="classes" location="classes_build" />
    <property name="classes.test" location="classes-test_build" />
    <property name="dist" location="dist" />
    <property name="report" location="junit-report" />
    <property name="plugin-temp" location="plugin-temp" />
    <property name="lib.dir" value="lib" />
    <property name="lib-dependency.dir" value="${lib.dir}/dependency" />
    
    <!-- 本体コンパイル用のクラスパス -->
    <path id="classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <!-- テストクラスコンパイル用のクラスパス -->
    <path id="classpath-test">
        <path refid="classpath" />
        <pathelement location="${classes}" />
        <fileset dir="${lib-dependency.dir}">
            <include name="junit-*.jar" />
        </fileset>
    </path>

    <target name="init" depends="clean, checkLog4jProperties, copyVerToMANIFEST">
        <!-- タイムスタンプを作成する -->
        <tstamp />
        <!-- コンパイルで使用するビルドディレクトリ構造を作成する -->
        <mkdir dir="${classes}" />
        <mkdir dir="${classes.test}" />
    </target>

    <!-- コンパイル -->
    <target name="compile" depends="init, compileENdoSnipeCommon, compileENdoSnipeDataAccessor" description="ソースをコンパイルする">
        <!-- 依存ライブラリをコピー -->
        <copy file="${endosnipe-common.jar}" todir="${lib-dependency.dir}" failonerror="yes" />
        <copy file="${endosnipe-dataaccessor.jar}" todir="${lib-dependency.dir}" failonerror="yes" />

        <!-- ${src}から${classes}に、Javaコードをコンパイルする -->
        <javac srcdir="${src}" destdir="${classes}" debug="on">
            <classpath refid="classpath" />
        </javac>

        <!-- リソースをコピーする -->
        <copy todir="${classes}">
            <fileset dir="${resources}" />
        </copy>
    </target>

    <!-- テストソースのコンパイル -->
    <target name="compile-test" depends="compile" description="テストソースをコンパイルする">
        <!-- ${src.test}から${classes.test}に、Javaコードをコンパイルする -->
        <javac srcdir="${src.test}" destdir="${classes.test}" debug="on">
            <classpath>
                <path refid="classpath-test" />
            </classpath>
        </javac>

        <!-- リソースをコピーする -->
        <copy todir="${classes.test}">
            <fileset dir="${resources.test}" />
        </copy>
    </target>
    
    <!-- 配布物の生成 -->
    <target name="dist" depends="runtest" description="配布物を生成する">
        <!-- distributionディレクトリを作成する -->
        <mkdir dir="${dist}" />

        <!-- jarを作成する -->

        <!-- 依存ライブラリを一本化 -->
        <unjar dest="${classes}" src="${lib.dir}/dependency/jsonic-1.2.5.jar" />

        <jar jarfile="${dist}/${distname}-${version}.jar" basedir="${classes}" excludes="**/log4j.properties">
            <manifest>
                <attribute name="Version" value="${version}_${build}" />
            </manifest>
        </jar>

    	<!-- テスト用共通ライブラリjarを作成する -->
        <jar jarfile="${dist}/${distname}-fortest-${version}.jar" basedir="${classes.test}">
            <manifest>
                <attribute name="Version" value="${version}_${build}" />
            </manifest>
        </jar>
    </target>

    <!-- JUnit テストの実行 -->
    <target name="runtest" depends="compile-test">
        <mkdir dir="${report}" />

<!--
        <junit printsummary="yes" haltonfailure="yes">
            <classpath>
                <path refid="classpath" />
                <pathelement location="${classes}" />
                <pathelement location="${classes.test}" />
            </classpath>
            <formatter type="plain" />
            <batchtest fork="no" todir="${report}">
                <fileset dir="${src.test}">
                    <include name="**/*Test.java" />
                    <exclude name="**/Abstract*Test.java" />
                </fileset>
            </batchtest>
        </junit>
-->
    </target>
    
    <!-- プラグインの生成 -->
    <target name="pluginDist" depends="dist" description="プラグインを生成する">
        <mkdir dir="${plugin-temp}" />
        <copy todir="${plugin-temp}">
            <fileset dir="${classes}" />
        </copy>

        <!-- 依存ライブラリを一本化 -->
        <unjar dest="${plugin-temp}" src="${lib.dir}/dependency/jsonic-1.2.5.jar" />

        <copy todir="${plugin-temp}">
            <fileset dir="." includes="plugin*.properties" />
        </copy>

        <jar jarfile="${dist}/${pluginname}_${version}.jar" basedir="${plugin-temp}" manifest="META-INF/MANIFEST.MF" />

        <delete dir="${plugin-temp}" />
    </target>

    <target name="clean" description="クリーンアップ">
        <!-- ${classes}と${dist}のjarを削除する -->

        <delete dir="${classes}" />
        <delete dir="${classes.test}" />
        <delete dir="${dist}" />
        <delete dir="${r}" />
        <delete dir="${plugin-temp}" />
    </target>
</project>
