/*******************************************************************************
 * ENdoSnipe 5.0 - (https://github.com/endosnipe)
 * 
 * The MIT License (MIT)
 * 
 * Copyright (c) 2012 Acroquest Technology Co.,Ltd.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 ******************************************************************************/
package jp.co.acroquest.endosnipe.communicator.entity;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

/**
 * 電文本体の項目名から計測値種別変換するためのユーティリティクラスです。<br />
 * 
 * @author fujii
 */
public class ResourceItemNameMap implements MeasurementConstants, TelegramConstants
{
	/** 項目名に対応する計測値種別を保存しているマップ */
	private static final Map<String, Integer> RESOURCE_MAP = new HashMap<String, Integer>();
	static
	{
		RESOURCE_MAP.put(ITEMNAME_TIME, TYPE_TIME);
		RESOURCE_MAP.put(ITEMNAME_ACQUIREDTIME, TYPE_ACQUIREDTIME);
		RESOURCE_MAP.put(ITEMNAME_PROCESS_CPU_TOTAL_TIME, TYPE_CPUTIME);
		RESOURCE_MAP.put(ITEMNAME_PROCESS_CPU_IOWAIT_TIME, TYPE_PROC_CPU_IOWAIT_TIME);
		RESOURCE_MAP.put(ITEMNAME_SYSTEM_CPU_IOWAIT_TIME, TYPE_SYS_CPU_IOWAIT_TIME);
		RESOURCE_MAP.put(ITEMNAME_JAVAUPTIME, TYPE_JAVAUPTIME);
		RESOURCE_MAP.put(ITEMNAME_SYSTEM_CPU_PROCESSOR_COUNT, TYPE_PROCESSORCOUNT);
		RESOURCE_MAP.put(ITEMNAME_JAVAPROCESS_MEMORY_HEAP_COMMIT,
				TYPE_HEAPMEMORY_COMMITTED);
		RESOURCE_MAP.put(ITEMNAME_JAVAPROCESS_MEMORY_HEAP_USED,
				TYPE_HEAPMEMORY_USED);
		RESOURCE_MAP.put(ITEMNAME_JAVAPROCESS_MEMORY_HEAP_MAX,
				TYPE_HEAPMEMORY_MAX);
		RESOURCE_MAP.put(ITEMNAME_JAVAPROCESS_MEMORY_NONHEAP_COMMIT,
				TYPE_NONHEAPMEMORY_COMMITTED);
		RESOURCE_MAP.put(ITEMNAME_JAVAPROCESS_MEMORY_NONHEAP_USED,
				TYPE_NONHEAPMEMORY_USED);
		RESOURCE_MAP.put(ITEMNAME_JAVAPROCESS_MEMORY_NONHEAP_MAX,
				TYPE_NONHEAPMEMORY_MAX);
		RESOURCE_MAP.put(ITEMNAME_SYSTEM_MEMORY_VIRTUAL_USED,
				TYPE_VIRTUALMEMORY_SIZE);
		RESOURCE_MAP.put(ITEMNAME_PROCESS_MEMORY_VIRTUALMACHINE_MAX,
				TYPE_VIRTUALMACHINEMEMORY_CAPACITY);
		RESOURCE_MAP.put(ITEMNAME_PROCESS_MEMORY_VIRTUALMACHINE_FREE,
				TYPE_VIRTUALMACHINEMEMORY_FREE);
		RESOURCE_MAP.put(ITEMNAME_PROCESS_MEMORY_PHYSICAL_MAX,
				TYPE_PHYSICALMEMORY_CAPACITY);
		RESOURCE_MAP.put(ITEMNAME_PROCESS_MEMORY_PHYSICAL_FREE,
				TYPE_PHYSICALMEMORY_FREE);
		RESOURCE_MAP.put(ITEMNAME_SYSTEM_MEMORY_SWAP_MAX,
				TYPE_SWAPSPACE_CAPACITY);
		RESOURCE_MAP.put(ITEMNAME_SYSTEM_MEMORY_SWAP_FREE, TYPE_SWAPSPACE_FREE);
		RESOURCE_MAP.put(ITEMNAME_NETWORKINPUTSIZEOFPROCESS,
				TYPE_NETWORK_INPUTSIZEOFPROCESS);
		RESOURCE_MAP.put(ITEMNAME_NETWORKOUTPUTSIZEOFPROCESS,
				TYPE_NETWORK_OUTPUTSIZEOFPROCESS);
		RESOURCE_MAP.put(ITEMNAME_FILEINPUTSIZEOFPROCESS,
				TYPE_FILE_INPUTSIZEOFPROCESS);
		RESOURCE_MAP.put(ITEMNAME_FILEOUTPUTSIZEOFPROCESS,
				TYPE_FILE_OUTPUTSIZEOFPROCESS);
		RESOURCE_MAP.put(ITEMNAME_FILEINPUTSIZEOFSYSTEM,
				TYPE_FILE_INPUTSIZEOFSYSTEM);
		RESOURCE_MAP.put(ITEMNAME_FILEOUTPUTSIZEOFSYSTEM,
				TYPE_FILE_OUTPUTSIZEOFSYSTEM);
		RESOURCE_MAP.put(ITEMNAME_JAVAPROCESS_THREAD_TOTAL_COUNT,
				TYPE_THREADCOUNT);
		RESOURCE_MAP.put(ITEMNAME_JAVAPROCESS_GC_TIME_TOTAL,
				TYPE_GARBAGETOTALTIME);
		RESOURCE_MAP.put(ITEMNAME_JAVAPROCESS_GC_FINALIZEQUEUE_COUNT,
				TYPE_FINALIZATIONCOUNT);
		RESOURCE_MAP.put(ITEMNAME_HTTPSESSION_NUM, TYPE_HTTPSESSION_NUMBER);
		RESOURCE_MAP.put(ITEMNAME_HTTPSESSION_TOTALSIZE,
				TYPE_HTTPSESSION_TOTALSIZE);
		RESOURCE_MAP.put(ITEMNAME_JAVAPROCESS_COLLECTION_LIST_COUNT,
				TYPE_LISTCOUNT);
		RESOURCE_MAP.put(ITEMNAME_JAVAPROCESS_COLLECTION_QUEUE_COUNT,
				TYPE_QUEUECOUNT);
		RESOURCE_MAP.put(ITEMNAME_JAVAPROCESS_COLLECTION_SET_COUNT,
				TYPE_SETCOUNT);
		RESOURCE_MAP.put(ITEMNAME_JAVAPROCESS_COLLECTION_MAP_COUNT,
				TYPE_MAPCOUNT);
		RESOURCE_MAP.put(ITEMNAME_JAVAPROCESS_COLLECTION_HISTOGRAM_SIZE,
				TYPE_CLASSHISTOGRAM_SIZE);
		RESOURCE_MAP.put(ITEMNAME_JAVAPROCESS_COLLECTION_HISTOGRAM_COUNT,
				TYPE_CLASSHISTOGRAM_COUNT);
		RESOURCE_MAP.put(ITEMNAME_SERVER_POOL, TYPE_SERVERPOOL);
		RESOURCE_MAP.put(ITEMNAME_POOL_SIZE, TYPE_POOLSIZE);
		RESOURCE_MAP.put(ITEMNAME_PROCESS_RESPONSE_TIME_AVERAGE,
				TYPE_TURNAROUNDTIME);
		RESOURCE_MAP.put(ITEMNAME_PROCESS_RESPONSE_TOTAL_COUNT,
				TYPE_TURNAROUNDTIMECOUNT);
		RESOURCE_MAP.put(ITEMNAME_PROCESS_RESPONSE_TIME_MAX,
				TYPE_TURNAROUNDTIMEMAX);
		RESOURCE_MAP.put(ITEMNAME_PROCESS_RESPONSE_TIME_MIN,
				TYPE_TURNAROUNDTIMEMIN);
		RESOURCE_MAP.put(ITEMNAME_NODECOUNT, TYPE_CALLTREENODE_COUNT);
		RESOURCE_MAP.put(ITEMNAME_CONVERTEDMETHOD, TYPE_CONVERTEDMOTHOD_COUNT);
		RESOURCE_MAP.put(ITEMNAME_CALLEDMETHODCOUNT, TYPE_CALLEDMETHODCOUNT);
		RESOURCE_MAP.put(ITEMNAME_EXCLUDEDMETHOD, TYPE_EXCLUDEDMOTHOD_COUNT);
		RESOURCE_MAP.put(ITEMNAME_JAVAPROCESS_CLASSLOADER_CLASS_TOTAL,
				TYPE_TOTAL_LOADEDCLASSCOUNT);
		RESOURCE_MAP.put(ITEMNAME_JAVAPROCESS_CLASSLOADER_CLASS_CURRENT,
				TYPE_LOADEDCLASSCOUNT);
		RESOURCE_MAP.put(ITEMNAME_JAVAPROCESS_EXCEPTION_OCCURENCE_COUNT,
				TYPE_THROWABLECOUNT);
		RESOURCE_MAP.put(ITEMNAME_JAVAPROCESS_STALL_OCCURENCE_COUNT,
				TYPE_METHODSTALLCOUNT);
		// RESOURCE_MAP.put(ITEMNAME_JAVAPROCESS_HTTP_EXCEPTION,
		// TYPE_HTTP_ERRPR_RESPONSE);
		RESOURCE_MAP.put(ITEMNAME_EVENT_COUNT, TYPE_EVENT_COUNT);
		RESOURCE_MAP.put(ITEMNAME_SYSTEM_MEMORY_PHYSICAL_MAX,
				TYPE_SYS_PHYSICALMEM_MAX);
		RESOURCE_MAP.put(ITEMNAME_SYSTEM_MEMORY_PHYSICAL_FREE,
				TYPE_SYS_PHYSICALMEM_FREE);
		RESOURCE_MAP.put(ITEMNAME_SYSTEM_CPU_USERMODE_TIME,
				TYPE_SYS_CPUTIME_TOTAL);
		RESOURCE_MAP.put(ITEMNAME_SYSTEM_CPU_SYSTEM_TIME, TYPE_SYS_CPUTIME_SYS);
		RESOURCE_MAP.put(ITEMNAME_CPU_ARRAY, TYPE_SYSTEM_CPUARRAY);
		RESOURCE_MAP.put(ITEMNAME_SYSTEM_MEMORY_PAGEIN_COUNT, TYPE_SYS_PAGE_IN);
		RESOURCE_MAP.put(ITEMNAME_SYSTEM_MEMORY_PAGEOUT_COUNT,
				TYPE_SYS_PAGE_OUT);
		RESOURCE_MAP.put(ITEMNAME_PROCESS_CPU_SYSTEM_TIME,
				TYPE_PROC_CPUTIME_SYS);
		RESOURCE_MAP.put(ITEMNAME_PROCESS_MEMORY_VIRTUAL_USED,
				TYPE_PROC_VIRTUALMEM_USE);
		RESOURCE_MAP.put(ITEMNAME_PROCESS_MEMORY_PHYSICAL_USED,
				TYPE_PROC_PHYSICALMEM_USE);
		RESOURCE_MAP.put(ITEMNAME_PROCESS_THREAD_TOTAL_COUNT,
				TYPE_PROC_THREAD_OS);
		RESOURCE_MAP.put(ITEMNAME_PROCESS_MEMORY_MAJORFAULT_COUNT,
				TYPE_PROC_MAJFLT);
		RESOURCE_MAP
				.put(ITEMNAME_SYSTEM_HANDLE_TOTAL_NUMBER, TYPE_SYS_FD_COUNT);
		RESOURCE_MAP.put(ITEMNAME_PROCESS_HANDLE_TOTAL_NUMBER,
				TYPE_PROC_FD_COUNT);
		RESOURCE_MAP.put(ITEMNAME_SYSTEM_CPU_TOTAL_USAGE,
				TYPE_SYS_CPU_TOTAL_USAGE);
		RESOURCE_MAP.put(ITEMNAME_SYSTEM_CPU_SYSTEM_USAGE,
				TYPE_SYS_CPU_SYS_USAGE);
		RESOURCE_MAP.put(ITEMNAME_SYSTEM_CPU_IOWAIT_USAGE,
				TYPE_SYS_CPU_IOWAIT_USAGE);
		RESOURCE_MAP.put(ITEMNAME_PROCESS_CPU_TOTAL_USAGE,
				TYPE_PROC_CPU_TOTAL_USAGE);
		RESOURCE_MAP.put(ITEMNAME_PROCESS_CPU_SYSTEM_USAGE,
				TYPE_PROC_CPU_SYS_USAGE);
		RESOURCE_MAP.put(ITEMNAME_PROCESS_CPU_IOWAIT_USAGE,
				TYPE_PROC_CPU_IOWAIT_USAGE);
		RESOURCE_MAP.put(ITEMNAME_COVERAGE, TYPE_COVERAGE);
		RESOURCE_MAP.put(ITEMNAME_SYSTEM_MEMORY_PHYSICAL_USED,
				TYPE_SYS_PHYSICALMEM_USED);
		RESOURCE_MAP.put(ITEMNAME_JMX, TYPE_JMX);
		// HadoopAgent項目
		RESOURCE_MAP.put(ITEMNAME_HADOOP_NAMENODE, TYPE_HADOOP_NAMENODE);
		RESOURCE_MAP.put(ITEMNAME_HADOOP_DATANODE, TYPE_HADOOP_DATANODE);
		RESOURCE_MAP.put(ITEMNAME_HADOOP_JOBTRACKER, TYPE_HAOOP_JOBTRACKER);
		RESOURCE_MAP.put(ITEMNAME_HADOOP_TASKTRACKER, TYPE_HADOOP_TASKTRACKER);
		RESOURCE_MAP.put(ITEMNAME_HBASE_HMASTER, TYPE_HBASE_HMASTER);
		RESOURCE_MAP
				.put(ITEMNAME_HBASE_HREGIONSERVER, TYPE_HBASE_HREGIONSERVER);
		RESOURCE_MAP.put(ITEMNAME_INFINISPAN_MAPREDUCE,
				TYPE_INFINISPAN_MAPREDUCE);
	}

    /**
     * 項目名から計測値種別を取得します。<br/>
     * 項目名が完全一致しない場合は、後方一致で検索します。
     * 
     * @param itemName 項目名。
     * @return 計測値種別。検索に一致しないか、引数がnullの場合はnullを返す。
     */
    public static Integer getResourceType(String itemName)
    {
        if (itemName == null)
        {
            return null;
        }
        Integer type = RESOURCE_MAP.get(itemName);
        // 項目名に接頭辞が付いている場合の対応: 見つからなければ末尾一致で線形検索する
        if (type == null)
        {
            Set<Map.Entry<String, Integer>> entrySet = RESOURCE_MAP.entrySet();
            for (Map.Entry<String, Integer> entry : entrySet)
            {
                String key = entry.getKey();
                if (itemName.endsWith(key) == true)
                {
                    type = entry.getValue();
                    break;
                }
            }
        }
        
        return type;
    }

    /**
     * デフォルトコンストラクタです。<br />
     */
    private ResourceItemNameMap()
    {
        // Do Nothing.
    }
}
